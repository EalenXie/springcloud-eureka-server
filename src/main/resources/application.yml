
server:
  port: 8761

spring:
  application:
    name: springcloud-eureka-server
  datasource:
    url: jdbc:mysql://localhost:3306/yourdatabase
    username: yourname
    password: yourpass
  jpa:
    hibernate:
      ddl-auto: update                                                          # 若不想自己手动建表,可设置为,后续请自行修改
##  单实例配置
eureka:
  instance:
    hostname: localhost                                                         # 服务注册中心实例的主机名
    lease-renewal-interval-in-seconds: 30                                       # 客户端向Eureka发送心跳周期(s)
    lease-expiration-duration-in-seconds: 90                                    # Eureka Server接收实例的最后一次发出的心跳后,删除需要等待时间(s)
  server:
    enable-self-preservation: true                                              # Eureka自我保护模式
  client:
    enabled: true                                                               # 启用Eureka客户端
    register-with-eureka: false                                                 # 是否向服务注册中心注册自己
    fetch-registry: false                                                       # 是否检索发现服务
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/    # 指定服务注册中心的位置
    registry-fetch-interval-seconds: 30                                         # Eureka client拉取服务注册信息间隔时间(s)
    initial-instance-info-replication-interval-seconds: 40                      # 最初复制实例信息到Eureka服务器所需时间(s)
    instance-info-replication-interval-seconds: 30                              # 复制实例变化信息到Eureka服务器所需要的时间间隔（s）
    eureka-service-url-poll-interval-seconds:  300                              # 轮询Eureka服务端地址更改的间隔时间(s)
    eureka-server-read-timeout-seconds: 8                                       # 读取Eureka Server信息的超时时间(s)
    eureka-server-connect-timeout-seconds: 5                                    # 连接Eureka Server的超时时间(s)
    eureka-server-total-connections: 200                                        # 从Eureka客户端到所有Eureka服务端的连接总数
    eureka-server-total-connections-per-host: 50                                # 从Eureka客户端到每个Eureka服务端主机的连接总数
    eureka-connection-idle-timeout-seconds: 30                                  # Eureka服务端连接的空闲关闭时间(s)
    heartbeat-executor-thread-pool-size: 2                                      # 心跳连接池的初始化线程数
    cache-refresh-executor-thread-pool-size: 2                                  # 缓存刷新线程池的初始化线程数


## 关于Eureka自我保护模式
## 默认情况下,如果Eureka Server在一定时间内没有接收到某个微服务实例的心跳,Eureka Server将会注销该实例(默认90秒)。
## 但是当网络分区故障发生时，微服务与Eureka Server之间无法正常通信,这就可能变得非常危险了--因为微服务本身是健康的，此时本不应该注销这个微服务。
## Eureka Server通过'自我保护模式'来解决这个问题,当Eureka Server节点在短时间内丢失过多客户端时(可能发生了网络分区故障),那么这个节点就会进入自我保护模式。
## 一旦进入该模式，Eureka Server就会保护服务注册表中的信息，不再删除服务注册表中的数据(也就是不会注销任何微服务)。当网络故障恢复后，该Eureka Server节点会自动退出自我保护模式。
## 自我保护模式是一种对网络异常的安全保护措施。使用自我保护模式，而已让Eureka集群更加的健壮、稳定。

## 多实例配置(即配置高可用)
## Eureka高可用实际上就是将自己作为服务向其他服务注册中心注册自已，这样就可以形成一组互相注册的服务注册中心，以实现服务清单的互相同步，达到高可用的效果。
## 下面就是host指向host2,host2指向host1,互相注册
#---
#server:
#  port: 8761
#eureka:
#  instance:
#    hostname: localhost      # host1
#  client:
#     service-url:
#          defaultZone: http://${eureka.instance.hostname}:8762/eureka/    # 指定服务注册中心实例2的位置
#spring:
#  profiles: host1
#
#---
#server:
#  port: 8762
#eureka:
#  instance:
#    hostname: localhost      # host2
#  client:
#     service-url:
#          defaultZone: http://${eureka.instance.hostname}:8761/eureka/    # 指定服务注册中心实例1的位置
#spring:
#  profiles: host2
